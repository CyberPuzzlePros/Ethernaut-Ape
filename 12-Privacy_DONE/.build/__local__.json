{"compilers":[{"contractTypes":["Privacy"],"name":"solidity","settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"contracts/Privacy.sol":{"":["ast"],"*":["abi","bin-runtime","devdoc","userdoc","evm.bytecode.object","evm.bytecode.sourceMap","evm.deployedBytecode.object"]}}},"version":"0.8.26+commit.8a97fa7a"}],"contractTypes":{"Privacy":{"abi":[{"inputs":[{"internalType":"bytes32[3]","name":"_data","type":"bytes32[3]"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"locked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes16","name":"_key","type":"bytes16"}],"name":"unlock","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"Privacy","deploymentBytecode":{"bytecode":"0x60806040525f805460ff1916600190811790915542908190556002805461ffff909216620100000263ffffffff199092169190911761ff0a179055348015610045575f80fd5b5060405161026e38038061026e833981016040819052610064916100dd565b61007060038281610077565b5050610156565b82600381019282156100a5579160200282015b828111156100a557825182559160200191906001019061008a565b506100b19291506100b5565b5090565b5b808211156100b1575f81556001016100b6565b634e487b7160e01b5f52604160045260245ffd5b5f606082840312156100ed575f80fd5b82601f8301126100fb575f80fd5b604051606081016001600160401b038111828210171561011d5761011d6100c9565b604052806060840185811115610131575f80fd5b845b8181101561014b578051835260209283019201610133565b509195945050505050565b61010b806101635f395ff3fe6080604052348015600e575f80fd5b5060043610603a575f3560e01c8063b3cea21714603e578063cf309012146059578063e1afb08c146073575b5f80fd5b604660015481565b6040519081526020015b60405180910390f35b5f5460649060ff1681565b60405190151581526020016050565b6082607e36600460a9565b6084565b005b6005546001600160801b0319828116911614609d575f80fd5b505f805460ff19169055565b5f6020828403121560b8575f80fd5b81356001600160801b03198116811460ce575f80fd5b939250505056fea2646970667358221220c723263ca0b09e6bbb0ead6c2e367a814580a2a9b657b2288d220e857260cfe464736f6c634300081a0033"},"devdoc":{"kind":"dev","methods":{},"version":1},"methodIdentifiers":{"ID()":"0xb3cea217","locked()":"0xcf309012","unlock(bytes16)":"0xe1afb08c"},"runtimeBytecode":{"bytecode":"0x6080604052348015600e575f80fd5b5060043610603a575f3560e01c8063b3cea21714603e578063cf309012146059578063e1afb08c146073575b5f80fd5b604660015481565b6040519081526020015b60405180910390f35b5f5460649060ff1681565b60405190151581526020016050565b6082607e36600460a9565b6084565b005b6005546001600160801b0319828116911614609d575f80fd5b505f805460ff19169055565b5f6020828403121560b8575f80fd5b81356001600160801b03198116811460ce575f80fd5b939250505056fea2646970667358221220c723263ca0b09e6bbb0ead6c2e367a814580a2a9b657b2288d220e857260cfe464736f6c634300081a0033"},"sourceId":"contracts/Privacy.sol","sourcemap":"57:965:0:-:0;;;80:25;;;-1:-1:-1;;80:25:0;101:4;80:25;;;;;;136:15;116:35;;;;162:29;;;245:52;;;;;;-1:-1:-1;;245:52:0;;;;;;;202:32;245:52;;;349:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;396:12;:4;403:5;396:4;:12;:::i;:::-;;349:66;57:965;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;57:965:0;;;-1:-1:-1;57:965:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:1;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:816;239:6;292:2;280:9;271:7;267:23;263:32;260:52;;;308:1;305;298:12;260:52;357:7;350:4;339:9;335:20;331:34;321:62;;379:1;376;369:12;321:62;412:2;406:9;454:2;442:15;;-1:-1:-1;;;;;472:34:1;;508:22;;;469:62;466:88;;;534:18;;:::i;:::-;570:2;563:22;605:6;649:2;634:18;;664:19;;;661:39;;;696:1;693;686:12;661:39;720:9;738:193;754:6;749:3;746:15;738:193;;;846:10;;869:18;;916:4;907:14;;;;771;738:193;;;-1:-1:-1;950:6:1;;146:816;-1:-1:-1;;;;;146:816:1:o;:::-;57:965:0;;;;;;","userdoc":{"kind":"user","methods":{},"version":1}}},"manifest":"ethpm/3","sources":{"contracts/Privacy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Privacy {\n    bool public locked = true; // 0\n    uint256 public ID = block.timestamp; // 1\n    uint8 private flattening = 10; // 2\n    uint8 private denomination = 255; // 2\n    uint16 private awkwardness = uint16(block.timestamp); // 2\n    bytes32[3] private data; // 3, 4, 5\n\n    constructor(bytes32[3] memory _data) {\n        data = _data;\n    }\n\n    function unlock(bytes16 _key) public {\n        //* byte16(data[2]) will truncate the last 16 bytes of data[2] and return only the first 16 bytes.\n        require(_key == bytes16(data[2]));\n        locked = false;\n    }\n\n    /*\n    A bunch of super advanced solidity algorithms...\n\n      ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`\n      .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,\n      *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\\\n      `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)\n      ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU\n    */\n}\n","urls":[]}}}